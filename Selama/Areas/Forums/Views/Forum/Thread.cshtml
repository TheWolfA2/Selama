@using Selama.Areas.Forums.ViewModels
@using Microsoft.AspNet.Identity;
@model ThreadViewModel
@{
    ViewBag.Title = Model.Title;
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        function onPostReplyClick()
        {
            $("#ThreadReplyEditor").show("blind")
                .find(".mdd_editor").val("").focus();
            $("#ThreadReplyEditor .mdd_preview").text("");
        }

        function onAjaxRequestBegin()
        {
            Selama.SpinShield.raiseShield();
        }
        function onAjaxRequestComplete()
        {
            Selama.SpinShield.lowerSheild();
        }

        function onReplyEditLinkClick(e)
        {
            var replyId = $(e.target).closest(".row[data-thread-reply]").attr("data-thread-reply");

            onAjaxRequestBegin();
            $.ajax({
                url: '@Url.Action("EditReply", "Forum", new { area = "Forums" })',
                data: { id: replyId },
                type: 'GET',
                complete: onAjaxRequestComplete,
                success: onReplyEditLinkClick_Success,
                error: onReplyEditLinkClick_Error,
            });
        }
        function onReplyEditLinkClick_Success(response)
        {
            $("#ThreadReplyEditModal").modal("show").find(".modal-body").html(response);
        }
        function onReplyEditLinkClick_Error(response)
        {
            if (response.statusText === "Invalid ID")
            {
                Selama.Alert.raiseAlert("An invalid thread reply ID was provided", "Invalid ID");
            }
            else
            {
                Selama.Alert.raiseAlert("An error occurred");
            }
        }

        function onThreadEditLinkClick(e)
        {
            onAjaxRequestBegin();
            $.ajax({
                url: '@Url.Action("EditThread", "Forum", new { area = "Forums", id = Model.ID})',
                type: 'GET',
                complete: onAjaxRequestComplete,
                success: onThreadEditLinkClick_Success,
                error: onThreadEditLinkClick_Error,
            });
        }
        function onThreadEditLinkClick_Success(response)
        {
            $("#ThreadEditModal").modal("show").find(".modal-body").html(response);
        }
        function onThreadEditLinkClick_Error(response)
        {
            if (response.statusText === "Invalid ID")
            {
                Selama.Alert.raiseAlert("An invalid thread ID was provided", "Invalid ID");
            }
            else
            {
                Selama.Alert.raiseAlert("An error occurred");
            }
        }

        function onReplyUpdateRequestSuccess(response)
        {
            $(".thread-reply[data-thread-reply='" + response.id + "']")
                .find(".thread-reply-content").html(response.content);
            $("#ThreadReplyEditModal").modal("hide");
        }
        function onReplyUpdateRequestFailure(response)
        {
            Selama.Alert.raiseAlert("An error occured while updating");
        }

        function onThreadUpdateRequestSuccess(response)
        {
            $(".row.thread[data-thread]").find(".thread-content").html(response);
            $("#ThreadEditModal").modal("hide");
        }
        function onThreadUpdateRequestFailure(response)
        {
            Selama.Alert.raiseAlert("An error occurred while updating");
        }

        function onEditorModalShown(e)
        {
            /// <param name="e" type="jQuery.Event" />
            var $editor = $(e.currentTarget).find("textarea.mdd_editor").focus();
            $editor.MarkdownDeep(Selama.MarkdownEditor.Options);
            var m = new MarkdownDeepEditor.Editor($editor[0], $(e.currentTarget).find("div.mdd_preview")[0]);
        }

        $(document).ready(function ()
        {
            $(".btn.btn-post-reply").click(onPostReplyClick);
            $("#ThreadReplyEditor").hide();
            $(".row.thread[data-thread]").on("click", ".edit-options-list .thread-edit", onThreadEditLinkClick);
            $(".row.thread-reply[data-thread-reply]").on("click", ".edit-options-list .thread-reply-edit", onReplyEditLinkClick);
            $("#ThreadReplyEditModal, #ThreadEditModal").on("shown.bs.modal", onEditorModalShown);
        });
    </script>
}

<ul class="breadcrumb">
    <li>
        @Html.ActionLink("Forums", "Index", "Forum", new { area = "Forums" }, null)
    </li>
    <li>
        @Html.ActionLink(Model.ForumName, "Threads", "Forum", new { area = "Forums", id = Model.ForumID }, null)
    </li>
    <li class="active">
        @Model.Title
    </li>
</ul>

<h2>
    @if (Model.IsPinned)
    { <text>[Pinned] </text>;
    }@Model.Title
</h2>
<div class="row" style="margin: 12px 0;">
    <div class="col-md-12" style="padding: 0;">
        <div class="btn btn-default btn-post-reply">
            Add Reply
        </div>
    </div>
</div>
<div class="row thread" data-thread="@Model.ID">
    <div class="panel panel-default">
        <div class="panel-heading">
            <div class="row">
                <div class="col-xs-6 col-sm-6 col-md-6">
                    @Html.DisplayFor(model => model.PostDate)
                </div>
                @if (User.Identity.GetUserId() == Model.AuthorID)
                {
                    <div class="col-xs-6 col-sm-6 col-md-6" style="text-align: right;">
                        <ul class="edit-options-list">
                            <li>
                                <a href="#" class="thread-edit">
                                    Edit
                                </a>
                            </li>
                            <li>Delete</li>
                        </ul>
                    </div>
                }
            </div>
        </div>
        <div class="panel-body">
            <div class="col-xs-12 col-sm-12 col-md-2 thread-author">
                @Model.Author
            </div>
            <div class="col-xs-12 col-sm-12 col-md-10 thread-content">
                @Model.HtmlContent
            </div>
        </div>
    </div>
</div>

@foreach (ThreadReplyViewModel reply in Model.Replies)
{
    @Html.DisplayFor(model => reply)
}

@Html.Partial("EditorTemplates/ThreadReplyViewModel", new ThreadReplyViewModel { ThreadID = Model.ID })

<div class="row" style="margin: 0;">
    <div class="col-md-12" style="padding: 0;">
        <div class="btn btn-default btn-post-reply">
            Add Reply
        </div>
    </div>
</div>

<div id="ThreadEditModal" class="modal fade" role="dialog"  data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">
                    Edit Thread
                </h4>
            </div>
            @using (Ajax.BeginForm("EditThread", "Forum", new { area = "Forums", id = Model.ID }, new AjaxOptions
            {
                OnBegin = "onAjaxRequestBegin",
                OnComplete = "onAjaxRequestComplete",
                OnSuccess = "onThreadUpdateRequestSuccess",
                OnFailure = "onThreadUpdateRequestFailure"
            }))
            {
                @Html.AntiForgeryToken()

                <div class="modal-body">
                    The editor goes here
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">
                        Update
                    </button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">
                        Close
                    </button>
                </div>
            }
        </div>
    </div>
</div>

<div id="ThreadReplyEditModal" class="modal fade" role="dialog" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">
                    Edit reply
                </h4>
            </div>
            @using (Ajax.BeginForm("EditReply", "Forum", new { area = "Forums" }, new AjaxOptions
            {
                OnBegin = "onAjaxRequestBegin",
                OnComplete = "onAjaxRequestComplete",
                OnFailure = "onReplyUpdateRequestFailure",
                OnSuccess = "onReplyUpdateRequestSuccess"
            }))
            {
                @Html.AntiForgeryToken()

                @Html.ValidationSummary(false, "", new { @class = "text-danger" })

                <div class="modal-body">
                    The content goes here
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">
                        Update
                    </button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">
                        Close
                    </button>
                </div>
            }
        </div>
    </div>
</div>