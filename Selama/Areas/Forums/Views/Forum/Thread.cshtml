@using Selama.Areas.Forums.Models;
@using Selama.Areas.Forums.ViewModels;
@using Selama.ViewModels;
@model ThreadViewModel
@{
    ViewBag.Title = Model.Title;
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        function onPostReplyClick()
        {
            $("#ThreadReplyEditor").show("blind")
                .find(".mdd_editor").focus();
        }

        function onAjaxRequestBegin()
        {
            Selama.SpinShield.raiseShield();
        }
        function onAjaxRequestComplete()
        {
            Selama.SpinShield.lowerShield();
        }

        function onReplyEditLinkClick(e)
        {
            var replyId = $(e.target).closest(".row[data-thread-reply]").attr("data-thread-reply");

            onAjaxRequestBegin();
            $.ajax({
                url: '@Url.Action("EditReply", "Forum", new { area = "Forums" })',
                data: { id: replyId },
                type: 'GET',
                complete: onAjaxRequestComplete,
                success: onReplyEditLinkClick_Success,
                error: onReplyEditLinkClick_Error,
            });
        }
        function onReplyEditLinkClick_Success(response)
        {
            $("#ThreadReplyEditModal").modal("show").find(".modal-body").html(response);
        }
        function onReplyEditLinkClick_Error(response)
        {
            if (response.statusText === "Invalid ID")
            {
                Selama.Alert.raiseAlert("An invalid thread reply ID was provided", "Invalid ID");
            }
            else if (response.statusText === "Thread is locked")
            {
                Selama.Alert.raiseAlert("The thread is locked for editing.", "Thread is locked");
            }
            else
            {
                Selama.Alert.raiseAlert("An error occurred");
            }
        }

        function onThreadEditLinkClick(e)
        {
            onAjaxRequestBegin();
            $.ajax({
                url: '@Url.Action("EditThread", "Forum", new { area = "Forums", id = Model.ID})',
                type: 'GET',
                complete: onAjaxRequestComplete,
                success: onThreadEditLinkClick_Success,
                error: onThreadEditLinkClick_Error,
            });
        }
        function onThreadEditLinkClick_Success(response)
        {
            $("#ThreadEditModal").modal("show").find(".modal-body").html(response);
        }
        function onThreadEditLinkClick_Error(response)
        {
            if (response.statusText === "Invalid ID")
            {
                Selama.Alert.raiseAlert("An invalid thread ID was provided", "Invalid ID");
            }
            else if (response.statusText === "Thread is locked")
            {
                Selama.Alert.raiseAlert("The thread is locked for editing.", "Thread is locked");
            }
            else
            {
                Selama.Alert.raiseAlert("An error occurred");
            }
        }

        function onReplyUpdateRequestSuccess(response)
        {
            $(".thread-reply[data-thread-reply='" + response.id + "']")
                .find(".thread-reply-content").html(response.content);
            $("#ThreadReplyEditModal").modal("hide");
        }
        function onReplyUpdateRequestFailure(response)
        {
            if (response.statusText === "Thread is locked")
            {
                Selama.Alert.raiseAlert("The thread is locked for editing.", "Thread is locked");
            }
            else
            {
                Selama.Alert.raiseAlert("An error occured while updating");
            }
        }

        function onThreadUpdateRequestSuccess(response)
        {
            $(".row.thread[data-thread]").find(".thread-content").html(response);
            $("#ThreadEditModal").modal("hide");
        }
        function onThreadUpdateRequestFailure(response)
        {
            if (response.statusText === "Thread is locked")
            {
                Selama.Alert.raiseAlert("The thread is locked for editing.", "Thread is locked");
            }
            else
            {
                Selama.Alert.raiseAlert("An error occurred while updating");
            }
        }

        function onEditorModalShown(e)
        {
            /// <param name="e" type="jQuery.Event" />
            var $target = $(e.currentTarget);
            var $editor = $target.find("textarea.mdd_editor").focus();
            $("textarea.mdd_editor").MarkdownDeep(Selama.MarkdownEditor.Options);
            var m = new MarkdownDeepEditor.Editor($editor[0], $target.find("div.mdd_preview")[0]);
        }

        function onThreadDeleteClick(e)
        {
            $("#ThreadDeleteModal").modal("show");
        }
        function onReplyDeleteClick(e)
        {
            $("#ReplyDeleteModal").find("input#id")
                .val(
                    $(e.target).closest(".row.thread-reply").attr("data-thread-reply")
                ).trigger("change");
            $("#ReplyDeleteModal").modal("show");
        }

        function onDeletFormSubmitClick()
        {
            Selama.SpinShield.raiseShield();
        }

        function onQuoteBtnClick(e)
        {
            // Set both urls, we don't know which one we'll need
            var replyQuoteUrl = '@Url.Action("GetReplyQuote", new { area = "Forums", page = Model.ViewPageNum })';
            var threadQuoteUrl = '@Url.Action("GetThreadQuote", new { area = "Forums" })';

            var $threadPost = $(e.target).closest(".row.thread-post");
            var ajaxId = 0;
            var ajaxUrl = "";

            if ($threadPost.is(".thread"))
            {
                ajaxId = $threadPost.attr("data-thread");
                ajaxUrl = threadQuoteUrl;
            }
            else if ($threadPost.is(".thread-reply"))
            {
                ajaxId = $threadPost.attr("data-thread-reply")
                ajaxUrl = replyQuoteUrl;
            }

            $.ajax({
                url: ajaxUrl,
                data: { id: ajaxId },
                success: onQuoteBtnClick_Success,
            });
        }
        function onQuoteBtnClick_Success(response)
        {            
            var $editor = $("#ThreadReplyEditor textarea.mdd_editor");
            var currentVal = $editor.val().trim();
            onPostReplyClick(); // show the editor
            if (currentVal === "")
            {
                $editor.val(response).trigger("change");
            }
            else
            {
                $editor.val(currentVal + "\n\n" + response).trigger("change");
            }
            // Triggers transfromation of the content
            var m = new MarkdownDeepEditor.Editor($editor[0], $editor.next(".mdd_preview")[0]);
        }

        $(document).ready(function ()
        {
            $(".btn.btn-post-reply").click(onPostReplyClick);
            $("#ThreadReplyEditor").hide();
            $("[data-toggle='tooltip']").tooltip();

            // Edit option link clicks
            $(".row.thread[data-thread] .post-options-list")
                .on("click", ".thread-post-edit", onThreadEditLinkClick)
                .on("click", ".thread-post-delete", onThreadDeleteClick);
            $(".row.thread-reply[data-thread-reply] .post-options-list")
                .on("click", ".thread-post-edit", onReplyEditLinkClick)
                .on("click", ".thread-post-delete", onReplyDeleteClick);
            $(".row.thread-post .post-options-list").on("click", ".thread-post-quote", onQuoteBtnClick);


            $("#ThreadReplyEditModal, #ThreadEditModal").on("shown.bs.modal", onEditorModalShown);
            $("#ThreadDeleteModal form, #ReplyDeleteModal form").submit(onDeletFormSubmitClick)
            $(".row.thread-reply:last").addClass("last");
        });
    </script>
}

@Styles.Render("~/Content/MarkdownDeep/css")

<ul class="breadcrumb">
    <li>
        @Html.ActionLink("Forums", "Index", "Forum", new { area = "Forums" }, null)
    </li>
    <li>
        @Html.ActionLink(Model.ForumName, "Threads", "Forum", new { area = "Forums", id = Model.ForumID }, null)
    </li>
    <li class="active">
        @Model.Title
    </li>
</ul>

<h2>
    @if (Model.IsPinned)
    { <text>[Pinned] </text>;
    }@Model.Title @if (Model.IsLocked)
    { <i class="fa fa-lock"></i>}
</h2>

@if (!string.IsNullOrWhiteSpace(ViewBag.Message))
{
    <div class="alert alert-warning alert-icontext">
        <span class="fa fa-2x fa-exclamation-circle"></span>
        <span>@ViewBag.Message</span>
    </div>
}

@if (Thread.CanModifiy(User))
{
    string action;
    <div class="row">
        <div class="col-sm-3 col-md-3" style="padding: 0;">
            @if (Model.IsLocked)
            {
                action = "Unlock";
            }
            else
            {
                action = "Lock";
            }
            @using (Html.BeginForm(action + "Thread", "Forum", new { id = Model.ID, page = Model.ViewPageNum }, FormMethod.Post, new { style = "display: inline-block;" }))
            {
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-default btn-icontext">
                    <span class="fa fa-@(action.ToLower())"></span>
                    <span>@action</span>
                </button>
            }
            @if (Model.IsPinned)
            {
                action = "Unpin";
            }
            else
            {
                action = "Pin";
            }
            @using (Html.BeginForm(action + "Thread", "Forum", new { id = Model.ID, page = Model.ViewPageNum }, FormMethod.Post, new { style = "display: inline-block;" }))
            {
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-default btn-icontext">
                    <span class="fa fa-thumb-tack"></span>
                    <span>@action</span>
                </button>
            }
        </div>
    </div>
}
<div class="row pager-row">
    <div class="col-sm-3 col-md-3" style="padding: 0;">
        @if (!Model.IsLocked)
        {
            <div class="btn btn-default btn-post-reply">
                Add Reply
            </div>
        }
    </div>
    <div class="col-sm-9 col-md-9" style="padding: 0;">
        @Html.Partial("_PagerPartial", new PagerViewModel(Model))
    </div>
</div>

@if (Model.ViewPageNum == 1)
{
    @Html.Partial("DisplayTemplates/ThreadPostViewModel", new ThreadPostViewModel(Model))
}

@foreach (var reply in Model.Replies)
{
    @Html.DisplayFor(model => reply)
}

<div id="ThreadReplyResult"></div>

<div class="row pager-row">
    <div class="col-sm-3 col-md-3" style="padding: 0;">
        @if (!Model.IsLocked)
        {
            <div class="btn btn-default btn-post-reply">
                Add Reply
            </div>
        }
    </div>
    <div class="col-sm-9 col-md-9" style="padding: 0;">
        @Html.Partial("_PagerPartial", new PagerViewModel(Model))
    </div>
</div>

@if (!Model.IsLocked)
{
    @Html.Partial("EditorTemplates/ThreadReplyViewModel", new ThreadReplyViewModel { ThreadID = Model.ID })
}

<div id="ModalContainer">
    <div id="ThreadEditModal" class="modal fade" role="dialog" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">
                        Edit Thread
                    </h4>
                </div>
                @using (Ajax.BeginForm("EditThread", "Forum", new { area = "Forums", id = Model.ID }, new AjaxOptions
            {
                OnBegin = "onAjaxRequestBegin",
                OnComplete = "onAjaxRequestComplete",
                OnSuccess = "onThreadUpdateRequestSuccess",
                OnFailure = "onThreadUpdateRequestFailure"
            }))
            {
                    @Html.AntiForgeryToken()

                    <div class="modal-body">
                        The editor goes here
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">
                            Update
                        </button>
                        <button type="button" class="btn btn-default" data-dismiss="modal">
                            Close
                        </button>
                    </div>
            }
            </div>
        </div>
    </div>

    <div id="ThreadReplyEditModal" class="modal fade" role="dialog" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">
                        Edit reply
                    </h4>
                </div>
                @using (Ajax.BeginForm("EditReply", "Forum", new { area = "Forums" }, new AjaxOptions
            {
                OnBegin = "onAjaxRequestBegin",
                OnComplete = "onAjaxRequestComplete",
                OnFailure = "onReplyUpdateRequestFailure",
                OnSuccess = "onReplyUpdateRequestSuccess"
            }))
            {
                    @Html.AntiForgeryToken()

                    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

                    <div class="modal-body">
                        The content goes here
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">
                            Update
                        </button>
                        <button type="button" class="btn btn-default" data-dismiss="modal">
                            Close
                        </button>
                    </div>
            }
            </div>
        </div>
    </div>

    <div id="ThreadDeleteModal" class="modal fade" role="dialog" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">
                        Confirm delete
                    </h4>
                </div>
                @using (Html.BeginForm("DeleteThread", "Forum", new { area = "Forums", id = Model.ID, page = Model.ViewPageNum }, FormMethod.Post))
            {
                    @Html.AntiForgeryToken()

                    <div class="modal-body">
                        Are you sure you want to delete this thread?
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">
                            OK
                        </button>
                        <button type="button" class="btn btn-default" data-dismiss="modal">
                            Cancel
                        </button>
                    </div>
            }
            </div>
        </div>
    </div>

    <div id="ReplyDeleteModal" class="modal fade" role="dialog" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">
                        Confirm delete
                    </h4>
                </div>
                @using (Html.BeginForm("DeleteReply", "Forum", new { area = "Forums", threadId = Model.ID, page = Model.ViewPageNum }, FormMethod.Post))
            {
                    @Html.AntiForgeryToken()

                    <input type="hidden" id="id" name="id" />

                    <div class="modal-body">
                        Are you sure you want to delete this reply?
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">
                            OK
                        </button>
                        <button type="button" class="btn btn-default" data-dismiss="modal">
                            Cancel
                        </button>
                    </div>
            }
            </div>
        </div>
    </div>
</div>