@model Selama.Areas.Forums.ViewModels.ThreadReplyViewModel

<div id="ThreadReplyResult"></div>

<div id="ThreadReplyEditor" class="row">
    @using (Ajax.BeginForm("PostReply", "Forum", new { area = "Forums", id = Model.ThreadID },
                new AjaxOptions
                {
                    HttpMethod = "POST",
                    UpdateTargetId = "ThreadReplyResult",
                    OnSuccess = "onPostClick_Success",
                    OnFailure = "onPostClick_Error"
                })
            )
    {
        @Html.AntiForgeryToken()

        @Html.EditorFor(model => model.ThreadID)

        <div class="form-horizontal">
            @Html.ValidationSummary(false, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.Content, new { @class = "col-md-2 control-label" })
                <div class="col-md-10">
                    @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
                    <div style="display: table; width: 100%;">
                        @Html.TextAreaFor(model => model.Content, new { @class = "form-control mdd_editor" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-2">
                    <input type="submit" value="Post" class="btn btn-default" />
                    <div id="ReplyCancelBtn" class="btn btn-default">
                        Cancel
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@Styles.Render("~/Content/MarkdownDeep/css")
@Scripts.Render("~/bundles/MarkdownDeep")
<script type="text/javascript">
        function onCancelClick()
        {
            $("#ThreadReplyEditor").effect("blind");
        }

        function onPostClick_Success(response)
        {
            $("#ThreadReplyEditor").effect("blind");
        }
        function onPostClick_Error(response)
        {
            if (response.statusText === "Thread is locked")
            {
                Selama.Alert.raiseAlert("The thread you're trying to reply to is locked from editing.", "Thread is locked");
            }
            else
            {
                var modelState = eval(response.responseText);
                if (modelState !== undefined)
                {
                    for (var i = 0; i < modelState.length; i++)
                    {
                        var error = {};
                        error[modelState[i].Property] = [];
                        for (var j = 0; j < modelState[i].Errors.length; j++)
                        {
                            error[modelState[i].Property].push("<li>" + modelState[i].Errors[j] + "</li>");
                        }

                        if (modelState[i].Property !== "")
                        {
                            $("#ThreadReplyEditor form").validate().showErrors(error);
                        }
                        else
                        {
                            for (var j = 0; j < error[""].length; j++)
                            {
                                $("#ThreadReplyEditor form .validation-summary-valid ul").append(error[""][j]);
                            }
                        }
                    }
                }
            }
        }

        $(document).ready(function ()
        {
            $(ReplyCancelBtn).click(onCancelClick);
        });
</script>